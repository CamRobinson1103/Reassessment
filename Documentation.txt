| Cameron Robinson |
| :---|
| s208065|
| Game Programming |
| Assessment Documentation |


## I. Requirements

1. Description of Problem

	- **Name**: 
	Assessment 


	- **Problem Statement**: 
	rst gettting something to eat, figthing a monster, gaining an ally, and finally going up against a boss

	- **Problem Specifications**:


### Object Information

	**File**: Game.cs
	
	**Attributes**

	 Name: Run()
             Description: This allows the game to run what is inside of it
             Type:public void

	Name: InitializeItems() 
             Description: Allows the items to be used in the program
             Type: private void
	
        Name: GetInput(out char input, string option1, string option2, string option3, string query)
             Description: Allows input to be used in the program
             Type: public void

	
        Name: GetInput(out char input, string option1, string option2, string query)
             Description: Allows input to be used in the program
             Type: public void

	Name: CharacterName()
	      Description: Allos the player to name themselves
		Type: public

	Name: PrintInventory(Item[] inventory)
             Description: Sets up the inventory
             Type: public void

        Name: KitchenShop()
             Description: The program in which you select items and put them in your inventory
             Type: private void

	Name: ClearScreen()
             Description: Clears the screen after text
             Type: public void

        Name: SelectingWeapon(Character _player)
             Description: This will make the player select a weapon
             Type: public void

        Name: EnemyBattle()
             Description:This will make the player face off against an enemy
             Type: public void

        Name: ChangeWeapon(Character player)
             Description: The player's weapon will change to a stronger one
             Type: public void

        Name: ContinueBattle()
             Description: The player will face the enemy again
             Type: public void
 
        Name: GettingAnAlly()
             Description: The player will gain an additional party member
             Type: public void

       Name: BossBattle()
             Description: The player will face an boss
             Type:  public void

	Name: MainMenu()
             Description: Allows the player to either start a new game or load a file
             Type: public void

        Name: Save()
             Description: Saves data
             Type: public void

        Name: Load()
             Description: Loads data
             Type: public void
 
        Name: Start()
             Description: Starts the program. Everything is in here will run first
             Type: public void

       Name: Update()
             Description: Updates the information needed for the game to run
             Type:  public void

       Name: End()
             Description: Ends the program
             Type: public void

       
	**File** : Character.cs

	 Name: Character() : base()
             Description: Base stats for the playable character
             Type: public void

       Name: Character(float healthVal, float magicVal, float damageVal, int inventorySize)
             Description: Base stats for the playable character
             Type:  public void

	Name: Buy(Item item, int inventoryIndex)
             Description: Allows the player to buy items
             Type: public bool

        Name: GetMoney()
             Description: Allows the players to recieve and use the money they have
             Type: public int

        Name: GetInventory()
             Description: Allows the player to access the inventory
             Type: public Item[]
 
        Name: AddItemToInventory(Item item, int index)
             Description: Puts items in inventory
             Type: public void

       Name: GetIsAlive()
             Description: Sees if the player is alive
             Type:  public void

       Name: Attack(Character enemy)
             Description: Allows the player to attack the enemy
             Type: public virtual float

	Name: TakeDamage(float damageVal)
             Description: Makes the player recieve damage
             Type: public void

        Name: EquipItem(int itemIndex)
             Description: Allows the player to equip a weapon
             Type: public void
 
        Name: Contains(int itemIndex)
             Description: Looks at itemIndex
             Type: public bool

       Name: Save(StreamWriter writer)
             Description: Saves data
              Type: public virtual void

	Name: Load(StreamReader reader)
             Description: Loads data
             Type: public virtual bool


	**File**: Shop.cs

	**Attributes**


        Name: Shop(Item[] kitchenInventory)
             Description: Makes up the shop
             Type: public

        Name: Sell(Character player, int itemIndex, int playerIndex)
             Description: Allows the shop to be used
             Type: public bool

	**File**: Enemy.cs

	**Attributes**
 
        Name: Enemy()
             Description: Enemy stats
             Type: public void

       Name: GetIsAlive()
             Description: Sees if the enemy is alive
             Type:  public void

       Name: PrintStats()
             Description: Prints out enemy stats
             Type: public void



	**File**: Ally.cs

	**Attributes**


 	Name: Ally() : base()
             Description: Base stats for the ally character
             Type: public void

       Name: public Ally(float healthVal, float magicVal, float damageVal, int inventorySize) : base(healthVal, magicVal, damageVal,inventorySize)
        {
             Description: Base stats for the ally character
             Type:  public void

	Name: public override float Attack(Character enemy)
             Description: Allows the ally to hit the enemy
             Type: public bool

	**File**: Boss.cs

	**Attributes**

        Name: Boss() : base()
             Description: Base stats for the boss
             Type: public int

        

      
